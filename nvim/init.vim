let $RTP=split(&runtimepath, ',')[0]
let $RC=$MYVIMRC

let g:mapleader = ' '

set shell=/bin/zsh

set number
" set relativenumber
set cursorline

" Tabs are spaces
set expandtab

set shiftwidth=2
set tabstop=2
set softtabstop=2

set colorcolumn=120

" No search highlight
set nohlsearch
" Live preview for search and replace
set inccommand=split

" Interface related options
set splitright                            " always open vsplit right
set splitbelow                            " always open splits below
set scrolloff=10                          " keep at least 10 lines above/below
set sidescrolloff=5                       " keep at least 5 lines right/left
set cmdheight=2                           " Give more space for displaying messages

" Jumplist behaviour
" set jumpoptions+=stack

" File Handling {{{

" Automatically write files on :next, :make, etc
set autowriteall

" trigger `autoread` when files changes on disk
set autoread
autocmd FocusGained,BufEnter,CursorHold,CursorHoldI * if mode() != 'c' | checktime | endif
" notification after file change
autocmd FileChangedShellPost *
\ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None

" Save automatically all the time
augroup auto_save
  autocmd!
  " Frequently save automatically
  autocmd BufLeave,FocusLost,InsertLeave,TextChanged * silent! wall
  " Check for file changes
  autocmd BufEnter,BufWinEnter,CursorHold,FocusGained * silent! checktime
augroup END

" Hide buffers instead of closing them (useful for switching between files)
set hidden

" Don't use backup files, we have Git for that
set nobackup
set noswapfile
set nowritebackup

" Search within subfolders by default
set path=.,,**
" But ignore noise
set path-=.git,build,node_modules,public,_site,third_party

" Ignore autogenerated files
set wildignore+=*.pyc
" Ignore source control
set wildignore+=.git
" Ignore lib/ dirs since the contain compiled libraries typically
set wildignore+=build,node_modules,public,_site
" Ignore images and fonts
set wildignore+=*.gif,*.jpg,*.jpeg,*.otf,*.png,*.svg,*.ttf
" Ignore case when completing
set wildignorecase

" }}}

" Local history
set undofile

" This variable must be enabled for colors to be applied properly
set termguicolors

" Autocomplete options
set completeopt=menu,menuone,noselect

call plug#begin(stdpath('data') . '/plugged')
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-lua/popup.nvim'
  Plug 'ojroques/vim-oscyank'
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'mfussenegger/nvim-ts-hint-textobject'
  Plug 'kyazdani42/nvim-web-devicons' " for file icons
  Plug 'kyazdani42/nvim-tree.lua'
  Plug 'kevinhwang91/nvim-bqf'
  Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
  Plug 'junegunn/fzf.vim'
  Plug 'nvim-telescope/telescope.nvim'
  " LSP
  Plug 'neovim/nvim-lspconfig'
  Plug 'glepnir/lspsaga.nvim'
  " Colorscheme
  Plug 'folke/tokyonight.nvim', { 'branch': 'main' }
  Plug 'Pocco81/Catppuccino.nvim'
  Plug 'NTBBloodbath/doom-one.nvim'
  " Autocomplete
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/nvim-cmp'
  " GIT
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'TimUntersberger/neogit'
  Plug 'sindrets/diffview.nvim'
  Plug 'tpope/vim-fugitive'
  " Undo
  Plug 'mbbill/undotree'
  " Database
  Plug 'tpope/vim-dadbod'
  Plug 'kristijanhusak/vim-dadbod-ui'
  " Status Line
  Plug 'hoob3rt/lualine.nvim'
  " Testing
  Plug 'vim-test/vim-test'
  Plug 'ThePrimeagen/harpoon'
  " Utilities
  Plug 'phaazon/hop.nvim'
  Plug 'lukas-reineke/indent-blankline.nvim'
  Plug 'folke/trouble.nvim'
  Plug 'ThePrimeagen/git-worktree.nvim'
  Plug 'AndrewRadev/splitjoin.vim'
  Plug 'AndrewRadev/sideways.vim'
  Plug 'AndrewRadev/switch.vim'
  Plug 'AndrewRadev/tagalong.vim'
  Plug 'andymass/vim-matchup'
  Plug 'tpope/vim-projectionist'
  "Plug 'sidebar-nvim/sidebar.nvim'
  Plug 'numToStr/Comment.nvim'
  Plug 'akinsho/toggleterm.nvim'
call plug#end()

" Catch 'y' command and use OSCYankReg to copy stuff
autocmd TextYankPost * if v:event.operator is 'y' && v:event.regname is '' | execute 'OSCYankReg "' | endif
let g:oscyank_term = 'tmux'

lua <<EOF
  local parser_configs = require('nvim-treesitter.parsers').get_parser_configs()

  --parser_configs.norg = {
  --    install_info = {
  --        url = "https://github.com/nvim-neorg/tree-sitter-norg",
  --        files = { "src/parser.c", "src/scanner.cc" },
  --        branch = "main"
  --    },
  --  }
  --- Treesitter settings
  require'nvim-treesitter.configs'.setup {
    ensure_installed = { "ruby", "lua", "cpp", "c", "javascript" },
    highlight = {
      enable = true,
    },
    matchup = {
      enable = true,
    },
  }

  local nvim_lsp = require('lspconfig')
  vim.lsp.set_log_level("debug")

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
    local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

    -- Mappings.
    local opts = { noremap=true, silent=true }

    -- See `:help vim.lsp.*` for documentation on any of the below functions
    buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
    buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
    --buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
    buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
    buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
    buf_set_keymap('n', '<leader>k', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
    buf_set_keymap('n', '<leader>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<leader>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
    buf_set_keymap('n', '<leader>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
    buf_set_keymap('n', '<leader>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
    buf_set_keymap('n', '<leader>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
    buf_set_keymap('n', '<leader>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
    buf_set_keymap('n', '<leader>e', '<cmd>lua vim.lsp.diagnostic.show_line_diagnostics()<CR>', opts)
    buf_set_keymap('n', '[d', '<cmd>lua vim.lsp.diagnostic.goto_prev()<CR>', opts)
    buf_set_keymap('n', ']d', '<cmd>lua vim.lsp.diagnostic.goto_next()<CR>', opts)
    buf_set_keymap('n', '<leader>q', '<cmd>lua vim.lsp.diagnostic.set_loclist()<CR>', opts)
    buf_set_keymap('n', '<leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
  end

  -- Use a loop to conveniently call 'setup' on multiple servers and
  -- map buffer local keybindings when the language server attaches
  local servers = { 'solargraph' }
  for _, lsp in ipairs(servers) do
    nvim_lsp[lsp].setup {
      on_attach = on_attach,
      flags = {
        debounce_text_changes = 150,
      },
      capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
    }
  end

  --- LSP Saga
  --- local saga = require 'lspsaga'
  --- saga.init_lsp_saga()

    -- Setup nvim-cmp.
  local cmp = require'cmp'

  cmp.setup({
    mapping = {
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<CR>'] = cmp.mapping.confirm({ select = true }),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'buffer' },
      --{ name = "neorg" },
    },
  })
  require('gitsigns').setup {
    signcolumn = true,
    sign_priority = 100,
    numhl      = false,
    on_attach = function(bufnr)
      local gs = package.loaded.gitsigns

      local function map(mode, l, r, opts)
        opts = opts or {}
        opts.buffer = bufnr
        vim.keymap.set(mode, l, r, opts)
      end

      -- Navigation
      map('n', ']c', "&diff ? ']c' : '<cmd>Gitsigns next_hunk<CR>'", {expr=true})
      map('n', '[c', "&diff ? '[c' : '<cmd>Gitsigns prev_hunk<CR>'", {expr=true})

      -- Actions
      map({'n', 'v'}, '<leader>hs', ':Gitsigns stage_hunk<CR>')
      map({'n', 'v'}, '<leader>hr', ':Gitsigns reset_hunk<CR>')
      map('n', '<leader>hS', gs.stage_buffer)
      map('n', '<leader>hu', gs.undo_stage_hunk)
      map('n', '<leader>hR', gs.reset_buffer)
      map('n', '<leader>hp', gs.preview_hunk)
      map('n', '<leader>hb', function() gs.blame_line{full=true} end)
      map('n', '<leader>tb', gs.toggle_current_line_blame)
      map('n', '<leader>hd', gs.diffthis)
      map('n', '<leader>hD', function() gs.diffthis('~') end)
      map('n', '<leader>td', gs.toggle_deleted)

      -- Text object
      map({'o', 'x'}, 'ih', ':<C-U>Gitsigns select_hunk<CR>')
    end
  }

  -- following options are the default
  require'nvim-tree'.setup {
    view = {
      -- width of the window, can be either a number (columns) or a string in `%`, for left or right side placement
      width = 50,
      -- side of the tree, can be one of 'left' | 'right' | 'top' | 'bottom'
      side = 'right',
      -- if true the tree will resize itself after opening a file
      auto_resize = true,
    }
  }

  --require('neorg').setup {
  --  -- Tell Neorg what modules to load
  --  load = {
  --    ["core.defaults"] = {}, -- Load all the default modules
  --    ["core.norg.concealer"] = {}, -- Allows for use of icons
  --    ["core.norg.dirman"] = { -- Manage your directories with Neorg
  --      config = {
  --        workspaces = {
  --          atlassian = "~/Documents/neorg/atlassian",
  --        },
  --       -- Automatically detect whenever we have entered a subdirectory of a workspace
  --        autodetect = true,
  --        -- Automatically change the directory to the root of the workspace every time 
  --        autochdir = true,
  --      }
  --    },
  --    ["core.norg.completion"] = {
  --      config = {
  --        engine = "nvim-cmp" -- We current support nvim-compe and nvim-cmp only
  --      }
  --    },
  --    ["core.keybinds"] = { -- Configure core.keybinds
  --      config = {
  --        default_keybinds = true, -- Generate the default keybinds
  --        neorg_leader = "<Leader>o" -- This is the default if unspecified
  --      }
  --    },
  --  },
  --}

  --- LuaLine
  require('lualine').setup {
    --options = {
    --  theme = 'catppuccino'
    --},
    --extensions = {'nvim-tree', 'quickfix'},
    sections = {
      lualine_a = {"mode"},
      lualine_b = {"branch", "diff"},
      lualine_c = {"filename"},
      lualine_x = {
        {"diagnostics", sources = {"nvim_lsp"}},
        "encoding",
        "fileformat",
        "filetype"
      },
      lualine_y = {"progress"},
      lualine_z = {"location"},
    }
  }

  --- Telescope
  local actions = require "telescope.actions"
  require('telescope').setup{
    defaults = {
      mappings = {
        n = {
          ["<Leader>q"] = actions.send_selected_to_qflist + actions.open_qflist,
        },
        i = {
          ["<Leader>q"] = actions.send_selected_to_qflist + actions.open_qflist,
        },
      },
      cache_picker = { limit_entries = 5 },
      ---layout_config = {
      ---  prompt_position = "bottom",
      ---  horizontal = {
      ---    width_padding = 0.04,
      ---    height_padding = 0.1,
      ---    preview_width = 0.6,
      ---  },
      ---  vertical = {
      ---    width_padding = 0.05,
      ---    height_padding = 1,
      ---    preview_height = 0.6,
      ---  },
      ---},
    },
  }

  --require("telescope").load_extension("git_worktree")

  --- Neogit
  local neogit = require("neogit")

  neogit.setup {
    integrations = {
      diffview = true  
    },
  }
  
  --- hop
  require'hop'.setup { keys = 'etovxqpdygfblzhckisuran' }


  -- Colorscheme settings
  --local catppuccino = require("catppuccino")

  --catppuccino.setup(
  --    {
  --    integrations = {
  --      treesitter = true,
  --      native_lsp = {
  --        enabled = true,
  --        virtual_text = {
  --          errors = "italic",
  --          hints = "italic",
  --          warnings = "italic",
  --          information = "italic",
  --        },
  --        underlines = {
  --          errors = "underline",
  --          hints = "underline",
  --          warnings = "underline",
  --          information = "underline",
  --        }
  --      },
  --      gitsigns = true,
  --      telescope = true,
  --      nvimtree = {
  --        enabled = true,
  --        show_root = true,
  --      },
  --      indent_blankline = {
  --        enabled = true,
  --        colored_indent_levels = true,
  --      },
  --      neogit = true,
  --      bufferline = false,
  --      hop = true,
  --    }
  --  }
  --)

  require('doom-one').setup({
      cursor_coloring = false,
      terminal_colors = false,
      italic_comments = true,
      enable_treesitter = true,
      transparent_background = false,
      pumblend = {
          enable = true,
          transparency_amount = 20,
      },
      plugins_integrations = {
          neorg = true,
          barbar = true,
          bufferline = false,
          gitgutter = false,
          gitsigns = true,
          telescope = true,
          neogit = true,
          nvim_tree = true,
          dashboard = true,
          startify = true,
          whichkey = true,
          indent_blankline = true,
          vim_illuminate = true,
          lspsaga = true,
      },
  })

  --require("sidebar-nvim").setup({
  --  disable_default_keybindings = 0,
  --  bindings = nil,
  --  open = false,
  --  side = "left",
  --  initial_width = 35,
  --  hide_statusline = false,
  --  update_interval = 1000,
  --  sections = { "buffers", "git", "containers" },
  --  section_separator = {"", "-----", ""},
  --  containers = {
  --      attach_shell = "/bin/sh", show_all = true, interval = 5000,
  --  },
  --  datetime = { format = "%a %b %d, %H:%M", clocks = { { name = "local" } } },
  --  todos = { ignored_paths = { "~" } },
  --  disable_closing_prompt = false
  --})

  local Terminal  = require('toggleterm.terminal').Terminal
  local tig = Terminal:new({
    cmd = "tig status",
    dir = "git_dir",
    direction = "float",
    float_opts = {
      border = "double",
    },
    on_open = function(term)
      vim.cmd("startinsert!")
      vim.api.nvim_buf_set_keymap(term.bufnr, "n", "q", "<cmd>close<CR>", {noremap = true, silent = true})
    end,
    on_close = function(term)
    end,
  })

  function _tig_toggle()
    tig:toggle()
  end

  local lazygit = Terminal:new({
    cmd = "lazygit",
    dir = "git_dir",
    direction = "float",
    float_opts = {
      border = "double",
    },
    on_open = function(term)
      vim.cmd("startinsert!")
      vim.api.nvim_buf_set_keymap(term.bufnr, "n", "q", "<cmd>close<CR>", {noremap = true, silent = true})
    end,
    on_close = function(term)
    end,
  })

  function _lazygit_toggle()
    lazygit:toggle()
  end

  vim.api.nvim_set_keymap("n", "<leader>gt", "<cmd>lua _tig_toggle()<CR>", {noremap = true, silent = true})
  vim.api.nvim_set_keymap("n", "<leader>gl", "<cmd>lua _lazygit_toggle()<CR>", {noremap = true, silent = true})


  require("toggleterm").setup {
    -- size can be a number or function which is passed the current terminal
    -- size = 20 | function(term)
    --   if term.direction == "horizontal" then
    --     return 15
    --   elseif term.direction == "vertical" then
    --     return vim.o.columns * 0.4
    --   end
    -- end,
    open_mapping = [[<c-/>]],
    --on_open = fun(t: Terminal), -- function to run when the terminal opens
    --on_close = fun(t: Terminal), -- function to run when the terminal closes
    hide_numbers = true, -- hide the number column in toggleterm buffers
    shade_filetypes = {},
    shade_terminals = true,
    shading_factor = '1', -- the degree by which to darken to terminal colour, default: 1 for dark backgrounds, 3 for light
    start_in_insert = true,
    insert_mappings = true, -- whether or not the open mapping applies in insert mode
    terminal_mappings = true, -- whether or not the open mapping applies in the opened terminals
    persist_size = true,
    direction = 'float',
    close_on_exit = true, -- close the terminal window when the process exits
    shell = 'fish', -- change the default shell
    -- This field is only relevant if direction is set to 'float'
    float_opts = {
      border = 'curved',
      winblend = 0,
      highlights = {
        border = "Normal",
        background = "Normal",
      },
    },
  }

  require('Comment').setup()
EOF

" Colorscheme
let g:tokyonight_style = "night"
"colorscheme tokyonight
"colorscheme catppuccino
colorscheme doom-one

" TS Hint Textobject
omap     <silent> m :<C-U>lua require('tsht').nodes()<CR>
vnoremap <silent> m :lua require('tsht').nodes()<CR>

" Nvim Tree
nnoremap <C-n> :NvimTreeToggle<CR>
nnoremap <leader>r :NvimTreeRefresh<CR>
nnoremap <leader>n :NvimTreeFindFile<CR>

" Quickfix

nnoremap <C-j> :cnext<CR> 
nnoremap <C-k> :cprev<CR> 

" Ripgrep instead of vimgrep search
if executable('rg')
  set grepprg=rg\ --no-heading\ --vimgrep
  set grepformat=%f:%l:%c:%m
endif

" Telescope
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fl <cmd>Telescope live_grep<cr>
nnoremap <leader>fg <cmd>Telescope grep_string<cr>
nnoremap <leader>fo <cmd>Telescope oldfiles<cr>
nnoremap <leader>fj <cmd>Telescope jumplist<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>
nnoremap <leader>fr <cmd>Telescope resume<cr>
nnoremap <leader>fs <cmd>Telescope git_status<cr>

nnoremap <leader>gw <cmd>lua require('telescope').extensions.git_worktree.git_worktrees()<cr>
nnoremap <leader>gc <cmd>lua require('telescope').extensions.git_worktree.create_git_worktree()<cr>

autocmd User TelescopePreviewerLoaded setlocal number

" Copy current buffer path to clipboard
nnoremap <Leader>c :let @+=expand('%:p')<CR>  

" Vim-test
nmap <silent> t<C-n> :TestNearest<CR>
nmap <silent> t<C-f> :TestFile<CR>
nmap <silent> t<C-s> :TestSuite<CR>
nmap <silent> t<C-l> :TestLast<CR>
nmap <silent> t<C-g> :TestVisit<CR>

let test#ruby#use_binstubs = 0
let test#strategy = {
  \ 'nearest': 'harpoon',
  \ 'file':    'harpoon',
  \ 'suite':   'harpoon',
\}
let test#neovim#term_position = "vert"
" Map exit terminal mode to C-o
if has('nvim')
  tmap <C-o> <C-\><C-n>
endif

" Harpoon
nnoremap <leader>a :lua require("harpoon.mark").add_file()<CR>
nnoremap <leader>gh :lua require("harpoon.ui").toggle_quick_menu()<cr>
nnoremap <leader>gch :lua require("harpoon.cmd-ui").toggle_quick_menu()<CR>

nnoremap <leader>jf :lua require("harpoon.ui").nav_file(1)<CR>
nnoremap <leader>jd :lua require("harpoon.ui").nav_file(2)<CR>
nnoremap <leader>js :lua require("harpoon.ui").nav_file(3)<CR>
nnoremap <leader>ja :lua require("harpoon.ui").nav_file(4)<CR>
nnoremap <leader>tf :lua require("harpoon.term").gotoTerminal(1)<CR>
nnoremap <leader>td :lua require("harpoon.term").gotoTerminal(2)<CR>

" Hop
lua vim.api.nvim_set_keymap('n', 'f', "<cmd>lua require'hop'.hint_words()<cr>", {})
lua vim.api.nvim_set_keymap('v', 'f', "<cmd>lua require'hop'.hint_words()<cr>", {})
"normal
    "up
    nmap K :HopLineStartBC<CR>
    "down
    nmap J :HopLineStartAC<CR>
    "left
    "nmap H :HopWordCurrentLineBC<CR>
    "right
    "nmap L :HopWordCurrentLineAC<CR>
    "char anywhere
    "nmap f :HopChar1<CR>
    "pattern anywhere
    "nmap s :HopPattern<CR>
    " Line
    nmap F <cmd>HopLine<CR>
"visual
    "up
    vmap K <cmd>HopLineStartBC<CR>
    "down
    vmap J <cmd>HopLineStartAC<CR>
    "left
    "vmap H <cmd>HopWordCurrentLineBC<CR>
    "right
    "vmap L <cmd>HopWordCurrentLineAC<CR>
    "char anywhere
    "vmap f <cmd>HopChar1<CR>
    " Line
    vmap F <cmd>HopLine<CR>

" LSP Saga
nnoremap <silent> gpd <cmd>lua require'lspsaga.provider'.preview_definition()<CR>

" Trouble
nnoremap <leader>xx <cmd>TroubleToggle<cr>
nnoremap <leader>xw <cmd>TroubleToggle lsp_workspace_diagnostics<cr>
nnoremap <leader>xd <cmd>TroubleToggle lsp_document_diagnostics<cr>
nnoremap <leader>xq <cmd>TroubleToggle quickfix<cr>
nnoremap <leader>xl <cmd>TroubleToggle loclist<cr>
nnoremap gR <cmd>TroubleToggle lsp_references<cr>

" Navigate properly when lines are wrapped
nnoremap j gj
nnoremap k gk

" Sideways 
 nnoremap <c-h> :SidewaysLeft<cr>
 nnoremap <c-l> :SidewaysRight<cr>

" Edit/Source init.vim
nnoremap <leader>ev :vsp $MYVIMRC<CR>
nnoremap <leader>sv :source $MYVIMRC <bar> :doautocmd BufRead<CR>

" Change the word for something new and then do the same with occurences by
" dot.
nnoremap cn *``cgn
nnoremap cN *``cgN

" Copy until the end
nnoremap Y yg$

" Have it all centered
nnoremap n nzzzv
nnoremap N Nzzzv

" Unite the lines
" nnoremap J mzJ`z

" Move up/down
"vnoremap J :m '>+1<CR>gv=gv
"vnoremap K :m '<-2<CR>gv=gv

" SplitJoin
nmap sj :SplitjoinSplit<cr>
nmap sk :SplitjoinJoin<cr>

